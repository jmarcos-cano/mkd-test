{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Instrucciones Lea cada una de las instrucciones a detalle, sin excepcion no habra dudas durante el examen. El Examen estara compuesto de estas partes: Parte I Parte II Parte III Navegacion Para poder navegar en esta pagina puede encontrar la siguiente informacion: Search Bar: usted puede buscar algun t\u00f3pico en el search que esta en navbar, parte superior derecha. Partes: las partes a evaluar estan listadas en la columna izquierda con un breadcrumb en la parte inferior, donde usted puede hacer Next/Previous API: el api esta incluido dentro de esta app en esta ruta dentro de esa ruta hay 2 endpoints management team Table of Contents: a su derecha se muestra el Table of Contents para cada pagina, utilicelo para navegacion mas sencilla. Componentes a evaluar Python Flask (Server Side Rendering) HTML CSS skills Python Requests, JSON parse REST APIs Jinja2","title":"Instrucciones"},{"location":"#instrucciones","text":"Lea cada una de las instrucciones a detalle, sin excepcion no habra dudas durante el examen. El Examen estara compuesto de estas partes: Parte I Parte II Parte III","title":"Instrucciones"},{"location":"#navegacion","text":"Para poder navegar en esta pagina puede encontrar la siguiente informacion: Search Bar: usted puede buscar algun t\u00f3pico en el search que esta en navbar, parte superior derecha. Partes: las partes a evaluar estan listadas en la columna izquierda con un breadcrumb en la parte inferior, donde usted puede hacer Next/Previous API: el api esta incluido dentro de esta app en esta ruta dentro de esa ruta hay 2 endpoints management team Table of Contents: a su derecha se muestra el Table of Contents para cada pagina, utilicelo para navegacion mas sencilla.","title":"Navegacion"},{"location":"#componentes-a-evaluar","text":"Python Flask (Server Side Rendering) HTML CSS skills Python Requests, JSON parse REST APIs Jinja2","title":"Componentes a evaluar"},{"location":"entrega/","text":"Entrega Requisitos Su programa debe correr, aquel programa que NO compile tendra un 0 inmediato. entregue un README.md con las siguientes secciones: Usage: debe explicarme como correr su programa, de preferencia Docker, si utiliza paquetes extra por favor incluya un requirements.txt y como instalarlos su aplicacion debe exponerse a si misma en el puerto 8080 en todas las interfaces Para entregar su respuesta usted debe crear un .zip con el siguiente formato \"Marcos_Cano.20192000.zip\" (Nombre_Apellido.Carnet.zip) con TODOS los archivos y directorios necesarios para ejecutar su programa Recomendaciones No pierda tanto tiempo en pequenos detalles visuales Vale mas la funcionalidad que lo visual y decorativo.","title":"Fin - Entrega"},{"location":"entrega/#entrega","text":"","title":"Entrega"},{"location":"entrega/#requisitos","text":"Su programa debe correr, aquel programa que NO compile tendra un 0 inmediato. entregue un README.md con las siguientes secciones: Usage: debe explicarme como correr su programa, de preferencia Docker, si utiliza paquetes extra por favor incluya un requirements.txt y como instalarlos su aplicacion debe exponerse a si misma en el puerto 8080 en todas las interfaces Para entregar su respuesta usted debe crear un .zip con el siguiente formato \"Marcos_Cano.20192000.zip\" (Nombre_Apellido.Carnet.zip) con TODOS los archivos y directorios necesarios para ejecutar su programa","title":"Requisitos"},{"location":"entrega/#recomendaciones","text":"No pierda tanto tiempo en pequenos detalles visuales Vale mas la funcionalidad que lo visual y decorativo.","title":"Recomendaciones"},{"location":"parte1/","text":"Parte I - Info Cards (30 pts.) REST API endpoints Usted interactua con un API y obtendra una respuesta en JSON que usted debera parsear. Esta respuesta representa la estructura organizacional de una empresa ficticia, este JSON tendra dos arrays los cuales usted puede accesar individualmente de la siguiente forma: management: representa a los fundadores y los chief heads de la empresa team: representa a los demas empleados Info Cards Con la respuesta del API usted debera crear cards (containers, info cards, puede ver la seccion de Cards \ud83d\ude09 ) que contengan y representen cada uno de los campos para cada empleado. (Por favor que ni se le pase por la mente quemar o hardcodear, se probara con diferente data) Cada campo del JSON response debera ser mapeado a esta card. { id : 5, email : charles.morris@reqres.in , first_name : Charles , last_name : Morris , role : CMO , avatar : https://s3.amazonaws.com/uifaces/faces/twitter/stephenmoon/128.jpg }, id: se muestra en la parte superior derecha. avatar: es la imagen de cada empleado first_name: FirstName last_name: LastName role: abajo del nombre completo Observaciones Debera interactuar y utilizar metodos http REST para obtener el JSON response (recuerde 'Content-Type: application/json' ) Ya hay librerias de python para hacer requests a REST endpoints Ya existen librerias de python para parsear json. Flask + Jinja + HTML + CSS le permitiran generar estas cards. se debera crear una card por cada empleado NO debe ser en forma de grid, es decir debe ser como se muestra en la siguiente parte Resuelva esto de una manera programatica, es decir de una manera que le permita interactuar con ambos API endpoint de una forma uniforme y sin repetir codigo, vea que hay 2 endpoints pero es el mismo schema/formato de respuesta. ! Haga porfavor que la URL del API sea facil de modificar, necesito modificarla facilmente al momento de calificar, mucho mejor si utiliza variables de entorno y si la coloca entre las primeras 10 lineas de su codigo como variable global.","title":"Parte1 - Cards"},{"location":"parte1/#parte-i-info-cards-30-pts","text":"","title":"Parte I - Info Cards (30 pts.)"},{"location":"parte1/#rest-api-endpoints","text":"Usted interactua con un API y obtendra una respuesta en JSON que usted debera parsear. Esta respuesta representa la estructura organizacional de una empresa ficticia, este JSON tendra dos arrays los cuales usted puede accesar individualmente de la siguiente forma: management: representa a los fundadores y los chief heads de la empresa team: representa a los demas empleados","title":"REST API endpoints"},{"location":"parte1/#info-cards","text":"Con la respuesta del API usted debera crear cards (containers, info cards, puede ver la seccion de Cards \ud83d\ude09 ) que contengan y representen cada uno de los campos para cada empleado. (Por favor que ni se le pase por la mente quemar o hardcodear, se probara con diferente data) Cada campo del JSON response debera ser mapeado a esta card. { id : 5, email : charles.morris@reqres.in , first_name : Charles , last_name : Morris , role : CMO , avatar : https://s3.amazonaws.com/uifaces/faces/twitter/stephenmoon/128.jpg }, id: se muestra en la parte superior derecha. avatar: es la imagen de cada empleado first_name: FirstName last_name: LastName role: abajo del nombre completo","title":"Info Cards"},{"location":"parte1/#observaciones","text":"Debera interactuar y utilizar metodos http REST para obtener el JSON response (recuerde 'Content-Type: application/json' ) Ya hay librerias de python para hacer requests a REST endpoints Ya existen librerias de python para parsear json. Flask + Jinja + HTML + CSS le permitiran generar estas cards. se debera crear una card por cada empleado NO debe ser en forma de grid, es decir debe ser como se muestra en la siguiente parte Resuelva esto de una manera programatica, es decir de una manera que le permita interactuar con ambos API endpoint de una forma uniforme y sin repetir codigo, vea que hay 2 endpoints pero es el mismo schema/formato de respuesta. ! Haga porfavor que la URL del API sea facil de modificar, necesito modificarla facilmente al momento de calificar, mucho mejor si utiliza variables de entorno y si la coloca entre las primeras 10 lineas de su codigo como variable global.","title":"Observaciones"},{"location":"parte2/","text":"Parte II - (60 pts) Descripcion Una vez completada la Parte 1 ahora debe crear un home page con los siguientes elementos: navbar : Title: Parcial 2 o lo que usted desee Management : donde se deplegara los info cards de cada una de las personas que se encuentren trabajando en la empresa en el management team Team : se deplegara los info cards de cada persona que trabaje dentro del team que ocupen cualquier otro puesto. About: donde se desplegara informacion acerca de Usted, en la Parte 3 Card List/Table : lista de containers con cada info card, OJO es solamente en 1 columna. Esta lista PUEDE ser como Cards en el navbar las opciones del bar pueden estar alineadas hacia la derecha, no necesariamente en el centro. Web Page La pagina debera verse asi: en el root (home) puede dejarlo en blanco o utilice un h1 Su Nombre Completo /h1 Observaciones Preste atenci\u00f3n a los colores que se utilizan (css) Material Design , PERO USTED PUEDE HACERLO PERSONALIZADO Y AGREGAR LOS COLORES O DISENOS QUE USTED QUIERA Preste atenci\u00f3n a la ubicacion de las cosas. Vea que el about es un \"boton\" de color fuschia. NO es un grid, es en una sola columna. La segunda info card aparece en \"blanco\" porque es una copia de la de arriba pero con datos diferentes (es otro empleado) Por favor que ni se le pase por la mente quemar o hardcodear","title":"Parte2 - Home"},{"location":"parte2/#parte-ii-60-pts","text":"","title":"Parte II - (60 pts)"},{"location":"parte2/#descripcion","text":"Una vez completada la Parte 1 ahora debe crear un home page con los siguientes elementos: navbar : Title: Parcial 2 o lo que usted desee Management : donde se deplegara los info cards de cada una de las personas que se encuentren trabajando en la empresa en el management team Team : se deplegara los info cards de cada persona que trabaje dentro del team que ocupen cualquier otro puesto. About: donde se desplegara informacion acerca de Usted, en la Parte 3 Card List/Table : lista de containers con cada info card, OJO es solamente en 1 columna. Esta lista PUEDE ser como Cards en el navbar las opciones del bar pueden estar alineadas hacia la derecha, no necesariamente en el centro.","title":"Descripcion"},{"location":"parte2/#web-page","text":"La pagina debera verse asi: en el root (home) puede dejarlo en blanco o utilice un h1 Su Nombre Completo /h1","title":"Web Page"},{"location":"parte2/#observaciones","text":"Preste atenci\u00f3n a los colores que se utilizan (css) Material Design , PERO USTED PUEDE HACERLO PERSONALIZADO Y AGREGAR LOS COLORES O DISENOS QUE USTED QUIERA Preste atenci\u00f3n a la ubicacion de las cosas. Vea que el about es un \"boton\" de color fuschia. NO es un grid, es en una sola columna. La segunda info card aparece en \"blanco\" porque es una copia de la de arriba pero con datos diferentes (es otro empleado) Por favor que ni se le pase por la mente quemar o hardcodear","title":"Observaciones"},{"location":"parte3/","text":"Parte III (10 pts) About En esta parte usted creara un about acerca de usted, de la forma como se muestra en el siguiente mock: Observaciones Ponga atenci\u00f3n a cada campo listado. Quizas la unica parte en la que debe de hardcode o puede usar variables.","title":"Parte3 - About"},{"location":"parte3/#parte-iii-10-pts","text":"","title":"Parte III (10 pts)"},{"location":"parte3/#about","text":"En esta parte usted creara un about acerca de usted, de la forma como se muestra en el siguiente mock:","title":"About"},{"location":"parte3/#observaciones","text":"Ponga atenci\u00f3n a cada campo listado. Quizas la unica parte en la que debe de hardcode o puede usar variables.","title":"Observaciones"},{"location":"resources/","text":"Extra Resources A continuacion se le brindan recursos extras que puede utilizar en su examen HTML puede encontrar toda la ayuda CSS aqui , no tiene que usar esto, pero es un buen inicio, debe modificarlo para adaptarlo. este html ya incluye Material Design !DOCTYPE html html head link rel= stylesheet href= https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css /head body nav div class= nav-wrapper a href= # class= brand-logo Logo /a ul id= nav-mobile class= right hide-on-med-and-down li a href= badges.html Components /a /li li a href= collapsible.html JavaScript /a /li li a href= a.html a class= waves-effect waves-light btn button /a /a /li /ul /div /nav div class= container center-align !-- Page Content goes here -- h1 Hello /h1 /div /body /html requirements.txt flask Dockerfile FROM python:3-alpine COPY requirements.txt /tmp RUN pip install -r /tmp/requirements.txt COPY . . CMD [ python , app.py ] README # Usage todos los pasos que se necesitan para correr su programa deben ir aqui en orden # HTML cards Me apoye en este CSS !DOCTYPE html html head link rel= stylesheet href= https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css \\ !-- Notice Im using w3 css -- link rel= stylesheet href= https://www.w3schools.com/w3css/4/w3.css /head body div class= container center-align !-- Page Content goes here -- h1 Hello Cards /h1 div class= w3-card-4 w3-container w3-round-xlarge center style= margin-left: auto; margin-right:auto;width 8em; margin-bottom: 20px; max-width:30%; img src= https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Welchcorgipembroke.JPG/1280px-Welchcorgipembroke.JPG alt= Avatar style= width:100%;opacity:0.85 div class= w3-container h4 b John /b /h4 p Architect and engineer /p /div /div div class= w3-card-4 w3-container w3-round-xlarge center style= margin-left: auto; margin-right:auto;width 8em; margin-bottom: 20px; max-width:30%; img src= https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Welchcorgipembroke.JPG/1280px-Welchcorgipembroke.JPG alt= Avatar style= width:100%;opacity:0.85 div class= w3-container h4 b John /b /h4 p Architect and engineer /p /div /div /div /body /html","title":"Extra Resources"},{"location":"resources/#extra-resources","text":"A continuacion se le brindan recursos extras que puede utilizar en su examen","title":"Extra Resources"},{"location":"resources/#html","text":"puede encontrar toda la ayuda CSS aqui , no tiene que usar esto, pero es un buen inicio, debe modificarlo para adaptarlo. este html ya incluye Material Design !DOCTYPE html html head link rel= stylesheet href= https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css /head body nav div class= nav-wrapper a href= # class= brand-logo Logo /a ul id= nav-mobile class= right hide-on-med-and-down li a href= badges.html Components /a /li li a href= collapsible.html JavaScript /a /li li a href= a.html a class= waves-effect waves-light btn button /a /a /li /ul /div /nav div class= container center-align !-- Page Content goes here -- h1 Hello /h1 /div /body /html","title":"HTML"},{"location":"resources/#requirementstxt","text":"flask","title":"requirements.txt"},{"location":"resources/#dockerfile","text":"FROM python:3-alpine COPY requirements.txt /tmp RUN pip install -r /tmp/requirements.txt COPY . . CMD [ python , app.py ]","title":"Dockerfile"},{"location":"resources/#readme","text":"# Usage todos los pasos que se necesitan para correr su programa deben ir aqui en orden #","title":"README"},{"location":"resources/#html-cards","text":"Me apoye en este CSS !DOCTYPE html html head link rel= stylesheet href= https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css \\ !-- Notice Im using w3 css -- link rel= stylesheet href= https://www.w3schools.com/w3css/4/w3.css /head body div class= container center-align !-- Page Content goes here -- h1 Hello Cards /h1 div class= w3-card-4 w3-container w3-round-xlarge center style= margin-left: auto; margin-right:auto;width 8em; margin-bottom: 20px; max-width:30%; img src= https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Welchcorgipembroke.JPG/1280px-Welchcorgipembroke.JPG alt= Avatar style= width:100%;opacity:0.85 div class= w3-container h4 b John /b /h4 p Architect and engineer /p /div /div div class= w3-card-4 w3-container w3-round-xlarge center style= margin-left: auto; margin-right:auto;width 8em; margin-bottom: 20px; max-width:30%; img src= https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Welchcorgipembroke.JPG/1280px-Welchcorgipembroke.JPG alt= Avatar style= width:100%;opacity:0.85 div class= w3-container h4 b John /b /h4 p Architect and engineer /p /div /div /div /body /html","title":"HTML cards"},{"location":"timer/","text":"Timer Time left: Hours Minutes Seconds const second = 1000, minute = second * 60, hour = minute * 60, day = hour * 24; let countDown = new Date('Oct 22, 2019 08:30:00').getTime(), x = setInterval(function() { let now = new Date().getTime(), distance = countDown - now; document.getElementById('hours').innerText = Math.floor((distance % (day)) / (hour)), document.getElementById('minutes').innerText = Math.floor((distance % (hour)) / (minute)), document.getElementById('seconds').innerText = Math.floor((distance % (minute)) / second); var minutes_left = Math.floor((distance % (hour)) / (minute)); //console.log(minutes_left); if (minutes_left == 5 ) { var alerted5 = localStorage.getItem('alerted5') || ''; if (alerted5 != 'yes') { alert(\"5 min left\"); localStorage.setItem('alerted5','yes'); } } }, second)","title":"Timer \u231b\ufe0f"},{"location":"timer/#timer","text":"","title":"Timer"}]}